/**
* 动态代理：
*  特点：字节码随用随创建，随用随加载
*  作用：不修改源码的基础上对方法增强
*  分类：
*      基于接口的动态代理
*      基于子类的动态代理
*  基于接口的动态代理：
*      涉及的类：Proxy
*      提供者：JDK官方
*  如何创建代理对象：
*      使用Proxy类中的newProxyInstance方法
*  创建代理对象的要求：
*      被代理类最少实现一个接口，如果没有则不能使用
*  newProxyInstance方法的参数：
*      ClassLoader：类加载器*          它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。
*      Class[]：字节码数组*          它是用于让代理对象和被代理对象有相同方法。固定写法。
*      InvocationHandler：用于提供增强的代码
*          它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。
*          此接口的实现类都是谁用谁写。
*/

/**
 * 作用：执行被代理对象的任何接口方法都会经过该方法
 * 方法参数的含义
 * @param proxy   代理对象的引用
 * @param method  当前执行的方法
 * @param args    当前执行方法所需的参数
 * @return        和被代理对象方法有相同的返回值
 * @throws Throwable
 */

/**
 * 动态代理 用于不修改源码的基础上增强方法，可以随时创建、加载
 *
 * 分类 基于子类的动态代理
 *  提供者：第三方 类 Enhancer
 *  创建方式 通过Enhancer类中的create
 *  要求：被代理类不能是最终类
 *  newProxyInstance中参数
 *      Class：被代理对象的字节码 xxx.getClass()

 *      InvocationHandler 写增强的代码
 *
 *      基于子类的动态代理
 *
 */

/**
 *
 * @param o 引用对象-
 * @param method 当前执行方法
 * @param objects 传入参数
 * @param methodProxy 当前执行方法的代理对象
 * @return
 * @throws Throwable
 */